
https://git-scm.com/book/en/v2/Git-Tools-Submodules

--

Testing clone of project with submodule
$ git clone https://github.com/lordmikefin/lib_test_app.git lib_test_app_clone
$ cd lib_test_app_clone/
$ git submodule init
$ git submodule update

Simpler way to clone
$ git clone --recursive https://github.com/lordmikefin/lib_test_app.git lib_test_app_clone

By default submodule points to commit ID instead of branch.
Change submodule to branch so we can commit our changes. (look used branch from .gitmodules -file)
$ cd lib_test_app_core/
$ git checkout master
$ cd ..

--

Show status also from submodule (local config - is not stored in the project)
$ git config status.submodulesummary 1
$ git status

--

Show submodule difference
$ git diff --submodule

Set config to show submodules w/o --submodule parameter
$ git config --global diff.submodule log
$ git diff

--

Add submodule to project
$ git submodule add https://github.com/lordmikefin/lib_test_app_core.git

Define branch for submodule (config is stored in the project)
$ git config -f .gitmodules submodule.lib_test_app_core.branch master
$ git submodule update --remote

--

Fetch newest changes.
$ git pull origin master

After pull submodule has only fetched not merged. Lets merge all submodules.
$ git submodule update --remote --merge

--

Push changes to repository.
$ git push origin master --recurse-submodules=on-demand

--
